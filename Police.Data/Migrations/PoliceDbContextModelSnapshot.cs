// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Police.Data;

namespace Police.Data.Migrations
{
    [DbContext(typeof(PoliceDbContext))]
    partial class PoliceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Police.Business.Identity.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Police.Business.Identity.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "PermissionName");

                    b.ToTable("RolePermissions", "Identity");
                });

            modelBuilder.Entity("Police.Business.Identity.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WindowsSid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("WindowsSid");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Police.Business.Identity.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Police.Business.Organization.Officers.Officer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Assignment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BadgeNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsCurrentlyEmployed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSwornOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Officers", "Org");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Incident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("IncidentCaseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("IncidentDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubmitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupervisorApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupervisorsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TrainingApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("SupervisorApproverId");

                    b.HasIndex("TrainingApproverId");

                    b.ToTable("Incidents", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.IncidentOfficers.IncidentOfficer", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int>("DidOfficerRequireMedicalAttention")
                        .HasColumnType("int");

                    b.Property<string>("DidOfficerRequireMedicalAttentionDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("SubmitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupervisorApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupervisorsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TrainingApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("WasOfficerInjured")
                        .HasColumnType("int");

                    b.HasKey("IncidentId", "OfficerId");

                    b.HasIndex("OfficerId");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("SupervisorApproverId");

                    b.HasIndex("TrainingApproverId");

                    b.ToTable("IncidentOfficers", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Report", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SubmitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupervisorApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupervisorsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TrainingApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId");

                    b.HasIndex("OfficerId");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("SupervisorApproverId");

                    b.HasIndex("TrainingApproverId");

                    b.HasIndex("IncidentId", "SubjectId");

                    b.ToTable("Reports", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Resistances.Resistance", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResistanceType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "ResistanceType");

                    b.ToTable("Resistances", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.FireArmDeadlyForceAddendum", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FireArmAmmoType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FireArmDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FireArmMake")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FireArmModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FireArmSerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "ResponseId");

                    b.ToTable("FireArmDeadlyForceAddendums", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.OtherDeadlyForceAddendum", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OtherDeadlyForceDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "ResponseId");

                    b.ToTable("OtherDeadlyForceAddendums", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.PitUsageAddendum", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PitUsageVehicleSpeed")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryImpactBySuspectVehicleAfterPitPartsImpacted")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("WasSecondaryImpactBySuspectVehicleAfterPit")
                        .HasColumnType("int");

                    b.Property<int>("WasSuspectVehicleImmobilized")
                        .HasColumnType("int");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "ResponseId");

                    b.ToTable("PitUsageAddendums", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResponseType")
                        .HasColumnType("int");

                    b.Property<int>("WasEffective")
                        .HasColumnType("int");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "Id");

                    b.ToTable("Responses", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdditionalShotsRequired")
                        .HasColumnType("int");

                    b.Property<int>("AnySecondaryInjuriesFromTaserUsage")
                        .HasColumnType("int");

                    b.Property<string>("CameraUsedToTakePhotos")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CyclesApplied")
                        .HasColumnType("int");

                    b.Property<int>("DidProbesContact")
                        .HasColumnType("int");

                    b.Property<int>("DidProbesPenetrateSkin")
                        .HasColumnType("int");

                    b.Property<decimal>("DistanceBetweenProbes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DistanceWhenLaunched")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfPhotosTaken")
                        .HasColumnType("int");

                    b.Property<int>("SubjectWearingHeavyClothing")
                        .HasColumnType("int");

                    b.Property<string>("TaserCartridgeNumberUsed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaserSerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("WasArcDisplayUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("WasDriveStunUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("WasLaserDisplayUsed")
                        .HasColumnType("bit");

                    b.Property<int>("WasMedicalAttentionRequiredForSecondaryInjuries")
                        .HasColumnType("int");

                    b.Property<bool>("WasProbeDeployUsed")
                        .HasColumnType("bit");

                    b.Property<int>("WereProbesRemovedAtScene")
                        .HasColumnType("int");

                    b.Property<string>("WhoRemovedProbes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "ResponseId");

                    b.ToTable("TaserUsageAddendums", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum+BodyUsageLocation", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyUsageType")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("IncidentId", "OfficerId", "SubjectId", "ResponseId", "BodyUsageType", "X", "Y");

                    b.ToTable("TaserUsageAddendums.BodyUsageLocations", "RestRep");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Subjects.Subject", b =>
                {
                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("SubjectType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("SubmitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupervisorApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupervisorsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TrainingApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingsComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IncidentId", "SubjectId");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("SupervisorApproverId");

                    b.HasIndex("TrainingApproverId");

                    b.ToTable("Subjects", "RestRep");

                    b.HasDiscriminator<string>("SubjectType").HasValue("Subject");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Subjects.Animals.SubjectAnimal", b =>
                {
                    b.HasBaseType("Police.Business.ResistanceResponse.Incidents.Subjects.Subject");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Animal");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Subjects.People.SubjectPerson", b =>
                {
                    b.HasBaseType("Police.Business.ResistanceResponse.Incidents.Subjects.Subject");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DidSubjectRequireMedicalAttention")
                        .HasColumnType("int");

                    b.Property<string>("DidSubjectRequireMedicalAttentionDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<int>("SuspectedUse")
                        .HasColumnType("int");

                    b.Property<int>("WasSubjectInjured")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Police.Business.Identity.Roles.RolePermission", b =>
                {
                    b.HasOne("Police.Business.Identity.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Police.Business.Identity.Users.UserRole", b =>
                {
                    b.HasOne("Police.Business.Identity.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Police.Business.Organization.Officers.Officer", b =>
                {
                    b.HasOne("Police.Business.Identity.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Police.Business.Organization.Officers.Officer", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Incident", b =>
                {
                    b.HasOne("Police.Business.Identity.Users.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "SupervisorApprover")
                        .WithMany()
                        .HasForeignKey("SupervisorApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Police.Business.Identity.Users.User", "TrainingApprover")
                        .WithMany()
                        .HasForeignKey("TrainingApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Submitter");

                    b.Navigation("SupervisorApprover");

                    b.Navigation("TrainingApprover");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.IncidentOfficers.IncidentOfficer", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany("IncidentOfficers")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Organization.Officers.Officer", "Officer")
                        .WithMany()
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "SupervisorApprover")
                        .WithMany()
                        .HasForeignKey("SupervisorApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Police.Business.Identity.Users.User", "TrainingApprover")
                        .WithMany()
                        .HasForeignKey("TrainingApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Incident");

                    b.Navigation("Officer");

                    b.Navigation("Submitter");

                    b.Navigation("SupervisorApprover");

                    b.Navigation("TrainingApprover");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Report", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany("Reports")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Organization.Officers.Officer", "Officer")
                        .WithMany()
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "SupervisorApprover")
                        .WithMany()
                        .HasForeignKey("SupervisorApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Police.Business.Identity.Users.User", "TrainingApprover")
                        .WithMany()
                        .HasForeignKey("TrainingApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.IncidentOfficers.IncidentOfficer", "IncidentOfficer")
                        .WithMany("Reports")
                        .HasForeignKey("IncidentId", "OfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Subjects.Subject", "Subject")
                        .WithMany("Reports")
                        .HasForeignKey("IncidentId", "SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("IncidentOfficer");

                    b.Navigation("Officer");

                    b.Navigation("Subject");

                    b.Navigation("Submitter");

                    b.Navigation("SupervisorApprover");

                    b.Navigation("TrainingApprover");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Resistances.Resistance", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Report", "Report")
                        .WithMany("Resistances")
                        .HasForeignKey("IncidentId", "OfficerId", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.FireArmDeadlyForceAddendum", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", "Response")
                        .WithOne("FireArmDeadlyForceAddendum")
                        .HasForeignKey("Police.Business.ResistanceResponse.Incidents.Reports.Responses.FireArmDeadlyForceAddendum", "IncidentId", "OfficerId", "SubjectId", "ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.OtherDeadlyForceAddendum", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", "Response")
                        .WithOne("OtherDeadlyForceAddendum")
                        .HasForeignKey("Police.Business.ResistanceResponse.Incidents.Reports.Responses.OtherDeadlyForceAddendum", "IncidentId", "OfficerId", "SubjectId", "ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.PitUsageAddendum", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", "Response")
                        .WithOne("PitUsageAddendum")
                        .HasForeignKey("Police.Business.ResistanceResponse.Incidents.Reports.Responses.PitUsageAddendum", "IncidentId", "OfficerId", "SubjectId", "ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Report", "Report")
                        .WithMany("Responses")
                        .HasForeignKey("IncidentId", "OfficerId", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", "Response")
                        .WithOne("TaserUsageAddendum")
                        .HasForeignKey("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum", "IncidentId", "OfficerId", "SubjectId", "ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum+BodyUsageLocation", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum", "TaserUsageAddendum")
                        .WithMany("BodyUsageLocations")
                        .HasForeignKey("IncidentId", "OfficerId", "SubjectId", "ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("TaserUsageAddendum");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Subjects.Subject", b =>
                {
                    b.HasOne("Police.Business.ResistanceResponse.Incidents.Incident", "Incident")
                        .WithMany("Subjects")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Police.Business.Identity.Users.User", "SupervisorApprover")
                        .WithMany()
                        .HasForeignKey("SupervisorApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Police.Business.Identity.Users.User", "TrainingApprover")
                        .WithMany()
                        .HasForeignKey("TrainingApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Incident");

                    b.Navigation("Submitter");

                    b.Navigation("SupervisorApprover");

                    b.Navigation("TrainingApprover");
                });

            modelBuilder.Entity("Police.Business.Identity.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Police.Business.Identity.Users.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Incident", b =>
                {
                    b.Navigation("IncidentOfficers");

                    b.Navigation("Reports");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.IncidentOfficers.IncidentOfficer", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Report", b =>
                {
                    b.Navigation("Resistances");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.Response", b =>
                {
                    b.Navigation("FireArmDeadlyForceAddendum");

                    b.Navigation("OtherDeadlyForceAddendum");

                    b.Navigation("PitUsageAddendum");

                    b.Navigation("TaserUsageAddendum");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Reports.Responses.TaserUsageAddendum", b =>
                {
                    b.Navigation("BodyUsageLocations");
                });

            modelBuilder.Entity("Police.Business.ResistanceResponse.Incidents.Subjects.Subject", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
